
/*
Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1
Example 2:

Input: [4,1,2,1,2]
Output: 4
*/

//Naive
var singleNumber = function(nums) {
    const map = {}

    for(let i=0;i<nums.length;i++) {
      if (map[nums[i]]) {
        map[nums[i]] = false;
      }else {
        map[nums[i]] = true;
      }
    }

    for(let i=0;i<nums.length;i++) {
      if (map[nums[i]])
        return nums[i]
    }
};


//XOR approach
var singleNumber = function(nums) {
  let a = 0;
  for(let i=0;i<nums.length;i++) {
    a ^= i
  }
  return a
}

singleNumber([4,1,2,1,2])