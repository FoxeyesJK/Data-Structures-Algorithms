//[Time Complexity:O(n)]
function findFactorialRecursive(num) {
  if(num === 1)
    return num

  return num * findFactorialRecursive(num-1)
}

findFactorialRecursive(3)

//[Time Complexity:O(n)]
function findFactorialIterative(num) {
  let result = 1
  for(let i=num;i>0;i--) {
    result *= i
  }

  return result
}

findFactorialIterative(3)

function fibonacciIterative(n){
  let arr = [0, 1];
  for (let i = 2; i < n + 1; i++){
    arr.push(arr[i - 2] + arr[i -1]);
  }
 return arr[n];
}
fibonacciIterative(3);

function fibonacciRecursive(n) {
  if (n < 2){
    return n;
  }
  return fibonacciRecursive(n - 1) + fibonacciRecursive (n - 2)
}

fibonacciRecursive(6)