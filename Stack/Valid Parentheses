//https://leetcode.com/problems/valid-parentheses/
//20. Valid Parentheses


//[Time Complexity: O(n)]
//[Space Complexity: O(n)]
class Node {
  constructor(value) {
    this.value = value
    this.next = null
  }
}

class Stack {
  constructor() {
    this.top = null
    this.bottom = null
    this.length = 0
  }

  peek() {
    return this.top;
  }

  push(value){
    const newNode = new Node(value);
    if (this.length === 0) {
      this.top = newNode;
      this.bottom = newNode;
    } else {
      const holdingPointer = this.top;
      this.top = newNode;
      this.top.next = holdingPointer;
    }
    this.length++;
    return this;
  }
  pop(){
    if (!this.top) {
      return null;
    }
    if (this.top === this.bottom) {
      this.bottom = null;
    }
    const holdingPointer = this.top;
    this.top = this.top.next;
    this.length--;
    return this;
  }
}

var isValid = function(s) {
    const stack = new Stack()    

    if(s.length === 1 && s[0] !== '{' && s[0] !== '(' && s[0] !== '[')
      return false

    for(let i=0;i<s.length;i++) {

        if(stack.top !== null && stack.top.value === '{' && s[i] === '}')
            stack.pop(s[i])        
        else if(stack.top !== null && stack.top.value === '[' && s[i] === ']')
            stack.pop(s[i])        
        else if(stack.top !== null && stack.top.value === '(' && s[i] === ')')
            stack.pop(s[i])
        else
          stack.push(s[i]) 
    }
    
    return stack.length === 0
};